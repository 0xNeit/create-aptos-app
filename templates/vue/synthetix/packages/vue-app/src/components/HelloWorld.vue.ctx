{
  "callToAction": "Read On-Chain Balance",
  "contractCall": [
    "/*** 1st method: get snx price with synthetix-js ***/",
    "",
    "// NOTE a lot of the calls need to be formatted. You can reference the many formatting examples in the dashboard repo",
    "// https://github.com/Synthetixio/synthetix-dashboard",
    "const snxjs = new SynthetixJs();",
    "const toUtf8Bytes = SynthetixJs.utils.formatBytes32String;",
    "",
    "// NOTE you can access any Synthetix contract via snxjs[contract][method]",
    "const unformattedSnxPrice = await snxjs.ExchangeRates.rateForCurrency(toUtf8Bytes(\"SNX\"));",
    "const snxPrice = Number(snxjs.utils.formatEther(unformattedSnxPrice));",
    "console.log({ snxPrice });",
    "",
    "/*** 2nd method: get snx balance with ethers.js ***/",
    "// Should replace with the end-user wallet, e.g. Metamask",
    "const defaultProvider = getDefaultProvider();",
    "// Create an instance of an ethers.js Contract",
    "// Read more about ethers.js on https://docs.ethers.io/v5/api/contract/contract/",
    "const snxContract = new Contract(addresses[MAINNET_ID].tokens.SNX, abis.tokens.SNX, defaultProvider);",
    "// A pre-defined address that owns some SNX tokens",
    "const snxBalance = await snxContract.balanceOf(\"0x49BE88F0fcC3A8393a59d3688480d7D253C37D2A\");",
    "console.log({ snxBalance: snxBalance.toString() });"
  ],
  "imports": [
    "import { MAINNET_ID, addresses, abis } from \"@synthetix-app/contracts\";",
    "import { SynthetixJs } from \"synthetix-js\";",
    "import GET_SYNTH_HOLDERS from \"../graphql/subgraph\";"
  ],
  "learn": {
    "items": [
      {
        "label": "Core Docs",
        "url": "https://docs.synthetix.io/"
      },
      {
        "label": "Community Chat",
        "url": "https://discordapp.com/invite/AEdUHzt"
      },
      {
        "label": "Reddit Community",
        "url": "https://reddit.com/r/synthetix_io"
      },
      {
        "label": "Twitter",
        "url": "https://twitter.com/synthetix_io"
      }
    ],
    "name": "Synthetix"
  },
  "subgraphQuery": {
    "key": "synthHolders",
    "name": "GET_SYNTH_HOLDERS"
  }
}
